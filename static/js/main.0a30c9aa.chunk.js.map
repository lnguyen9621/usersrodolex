{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","user","className","src","id","alt","name","username","email","CardList","users","map","key","SearchBox","placeholder","handleChange","type","onChange","App","props","e","setState","searchField","target","value","state","fetch","then","response","json","this","filterUsers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TAKaA,G,MAAO,SAAC,GAAe,IAAZC,EAAW,EAAXA,KAEpB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAKG,GAA/B,0BAA2DC,IAAI,cACvE,4BAAKJ,EAAKK,MACV,2BAAIL,EAAKM,UACT,2BAAIN,EAAKO,UCNRC,G,MAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEvB,OACI,yBAAKR,UAAU,aACVQ,EAAMC,KAAI,SAAAV,GAAI,OACX,kBAAC,EAAD,CAAMW,IAAKX,EAAKG,GAAIH,KAAMA,UCN7BY,G,MAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAErC,OAEI,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCgCrEG,G,wDAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVJ,aAAe,SAACK,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACTf,MAAO,GACPY,YAAa,IAJF,E,gEAQC,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GAAK,OAAI,EAAKW,SAAS,CAACX,MAAOA,S,+BAOhC,MAE0BoB,KAAKL,MAA5Bf,EAFH,EAEGA,MAAOY,EAFV,EAEUA,YAETS,EAAcrB,EAAMsB,QAAO,SAAA/B,GAAI,OAAIA,EAAKK,KAAK2B,cAAcC,SAASZ,EAAYW,kBAEtF,OACI,yBAAK/B,UAAU,OACX,6CACA,kBAAC,EAAD,CAAWY,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,kBAAC,EAAD,CAAUL,MAAOqB,S,GA7BfI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a30c9aa.chunk.js","sourcesContent":["//file name: card.component.jsx ../src/components/card/card.component.jsx\r\nimport React from 'react';\r\nimport './card.styles.css';\r\n\r\n//desconstruct props.user passing from CardList '<Card key={user.id} user={user}/>' to ({ user })\r\nexport const Card = ( { user }) => {\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${user.id}?set=set5&size=180x180`} alt=\"userImage\" />\r\n            <h4>{user.name}</h4>\r\n            <p>{user.username}</p>\r\n            <p>{user.email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\n","//file name: card-list.component.jsx ../src/components/card-list/card-list.component.jsx\r\nimport React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n//desconstruct props.users passsing from App '<CardList users={filterUsers} />' to ( { users })\r\nexport const CardList = ({ users }) => {\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {users.map(user => (\r\n                <Card key={user.id} user={user}/>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","////file name: searchbox.component.jsx ../src/components/search-box/searchbox.component.jsx\r\nimport React from 'react';\r\nimport './searchbox.styles.css';\r\n\r\n//deconstruct props.placeholder, props.handleChange to ({placeholder, handleChange})\r\nexport const SearchBox = ( {placeholder, handleChange}) => {\r\n\r\n    return (\r\n        \r\n        <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n    );\r\n}\r\n","//file name: ../src/App.js\r\nimport React, { Component } from 'react';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/searchbox.component';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            users: [],\r\n            searchField: ''\r\n         }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({users: users}))\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({searchField: e.target.value});\r\n    }\r\n    \r\n    render() { \r\n        //deconstruct this.state.users and this.state.searchField from this.state\r\n        const { users, searchField } = this.state;\r\n        //filtering out user.name from {users} array\r\n        const filterUsers = users.filter(user => user.name.toLowerCase().includes(searchField.toLowerCase()));\r\n        \r\n        return ( \r\n            <div className=\"App\">\r\n                <h1>Users Rodolex</h1>\r\n                <SearchBox placeholder=\"search user....\" handleChange={this.handleChange} />\r\n                <CardList users={filterUsers} />\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}